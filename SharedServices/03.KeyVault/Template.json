{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "keyVault": {
      "type": "object"
    },
    "virtualNetwork": {
      "type": "object"
    }
  },
  "variables": {
    "roleAssignmentApiVersion": "2021-04-01-preview",
    "keyVaultApiVersion": "2021-04-01-preview",
    "networkApiVersion": "2021-03-01",
    "dnsZoneApiVersion": "2020-06-01",
    "dnsZoneName": "privatelink.vaultcore.azure.net"
  },
  "functions": [
  ],
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[parameters('keyVault').name]",
      "apiVersion": "[variables('keyVaultApiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "name": "[parameters('keyVault').tier]",
          "family": "A"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForDeployment": "[parameters('keyVault').enableForDeployment]",
        "enabledForDiskEncryption": "[parameters('keyVault').enableForDiskEncryption]",
        "enabledForTemplateDeployment": "[parameters('keyVault').enableForTemplateDeployment]",
        "enableRbacAuthorization": "[parameters('keyVault').enableRbacAuthorization]",
        "enablePurgeProtection": "[if(parameters('keyVault').enablePurgeProtection, true(), json('null'))]",
        "softDeleteRetentionInDays": "[parameters('keyVault').softDeleteRetentionDays]",
        "networkAcls": {
          "defaultAction": "Deny",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type":"Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('keyVault').name, '/', parameters('keyVault').secrets[copyIndex()].name)]",
      "apiVersion": "[variables('keyVaultApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn":[
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVault').name)]"
      ],
      "properties": {
        "value": "[parameters('keyVault').secrets[copyIndex()].value]"
      },
      "copy": {
        "name": "secrets",
        "count": "[length(parameters('keyVault').secrets)]"
      }
    },
    {
      "type":"Microsoft.KeyVault/vaults/keys",
      "name": "[concat(parameters('keyVault').name, '/', parameters('keyVault').keys[copyIndex()].name)]",
      "apiVersion": "[variables('keyVaultApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn":[
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVault').name)]"
      ],
      "properties": {
        "kty": "[parameters('keyVault').keys[copyIndex()].type]",
        "keySize": "[parameters('keyVault').keys[copyIndex()].size]"
      },
      "copy": {
        "name": "keys",
        "count": "[length(parameters('keyVault').keys)]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
      "name": "[concat(parameters('keyVault').name, '/Microsoft.Authorization/', guid(parameters('keyVault').roleAssignments[copyIndex()].roleId, parameters('keyVault').roleAssignments[copyIndex()].principalId))]",
      "apiVersion": "[variables('roleAssignmentApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn":[
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVault').name)]"
      ],
      "properties": {
        "roleDefinitionId": "[concat(resourceGroup().id, '/providers/Microsoft.Authorization/roleDefinitions/', parameters('keyVault').roleAssignments[copyIndex()].roleId)]",
        "principalId": "[parameters('keyVault').roleAssignments[copyIndex()].principalId]",
        "principalType": "[parameters('keyVault').roleAssignments[copyIndex()].principalType]"
      },
      "copy": {
        "name": "roleAssignments",
        "count": "[length(parameters('keyVault').roleAssignments)]"
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "name": "[variables('dnsZoneName')]",
      "apiVersion": "[variables('dnsZoneApiVersion')]",
      "location": "global",
      "properties": {
      }
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "name": "[concat(variables('dnsZoneName'), '/', parameters('virtualNetwork').name)]",
      "apiVersion": "[variables('dnsZoneApiVersion')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneName'))]"
      ],
      "properties": {
        "virtualNetwork": {
          "id": "[resourceId(parameters('virtualNetwork').resourceGroupName, 'Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
        },
        "registrationEnabled": "[parameters('virtualNetwork').enableDnsAutoRegistration]"
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "name": "[parameters('keyVault').name]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVault').name)]"
      ],
      "properties": {
        "subnet": {
          "id": "[resourceId(parameters('virtualNetwork').resourceGroupName, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnetName)]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "keyVault",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVault').name)]",
              "groupIds": [
                "vault"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "name": "[concat(parameters('keyVault').name, '/default')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', parameters('keyVault').name)]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneName'))]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "[replace(variables('dnsZoneName'), '.', '-')]",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneName'))]"
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "keyVault": {
      "type": "object",
      "value": {
        "name": "[parameters('keyVault').name]",
        "resourceGroupName": "[resourceGroup().name]",
        "resourceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVault').name)]"
      }
    }
  }
}
